# -*- coding: utf-8 -*-
"""Task 2 - Spark Foundation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgttOQ2t8TGLzdieZVHN9hc0W4oJjy4I

# **NAME : SUMANTH NAYAK**

#**TASK 2 : TO EXPLORE SUPERVISED MACHINE LEARNING**

#**OBJECTIVE:PREDICTED SCORE IF A STUDENT STUDIES 9.25 HRS A DAY**

Regression analysis is a powerful statistical method that allows us to examine the relationhip between two or more variables. While there are many types of regression analysis, at their core we all examine is the influence of one or more independent variables on a dependent variable. In the tast#2 data set, the dependent variable is Score of the students and the independent variable is the Hours the students study. The objective of our analysis is to determine and predict the score of the student who studies 9.25 hrs.

#**1. IMPORTING THE LIBRARIES**
"""

import pandas as pd 
import math 
import numpy as np 
from sklearn import linear_model 
import seaborn as sns 
import pandas.testing as tm 
import matplotlib.pyplot as plt

"""These libraries are powerful to perform any computations, fit a model and provide relevant data visualisation.

---

#**2. UPLOADING THE DATA SET**
"""

df=pd.read_csv('http://bit.ly/w-data')

"""#**3. CHECKING THE HEAD AND TAIL**"""

df.head()

df.tail()

df.info # Looking at the whole data set information

"""#**4. CHECKING THE DATA TYPE OF THE VARIABLES**"""

df.dtypes # Looking for unknown data types

"""#**5. CHECKING FOR MISSING VALUES**"""

df.isnull().sum() # Checking for null values

"""During any analysis it becomes very important for an analyst to check for any non-zero values or any special characters or anything which is irrelavant entry within the data set

#**6. CHECKING BASIC ATTRIBUTES**
"""

df.describe()

"""Compare mean and 50% (2nd quartile / Median) and check for variation. The values within the variables are normally distributed if the gap is less

#**7. CORRELATION BETWEEN HOURS AND SCORES**
"""



correlation = df.corr()
sns.heatmap(correlation, cmap='plasma', annot=True)

"""The above chart clearly indicates there exists a high correlation between Hours and Scores and the correlation is positive, since the value is close to 1.

#**8. Regression Plot Between Hours and Scores**
"""

sns.regplot(x = 'Hours', y = 'Scores', data = df) 
plt.show()

"""The above chart indicated there is a positive linear repationship between the number of Hours a student studies and scores obtained. This allows us to fit the regression model.

#**9. TRAINING THE DATA**
"""

x = df[['Hours']]
y = df['Scores']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3, random_state=45)

"""The best way to predict the result is training 70% of the dataset and testing with the remaining 30%. This provides accuracy within the model and is expected to give less error."""

reg = LinearRegression()
reg.fit(x_train,y_train)
print('training complete')

"""We can also find the regression equation for the train data set"""

reg.intercept_

reg.coef_

"""From the above intercet and slope, the regression equation is **y = 1.216 x + 9.81**"""

print(x_test)
y_pred = reg.predict(x_test)
y_pred

"""#**10. Comparing Actual VS Predicted Scores**"""

df1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df1

"""We observe there is little difference between the actual and the predicted Scores. This supports the argument that the predicted model is the best fit and we may proceed with predicting our objective.

#**11. PREDICTING THE SCORE**
"""

hours = float(input('Enter the total number of hours studied : '))
cls_predict = reg.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Scores for studing total number of hours = {:.3f}%".format(cls_predict[0]))

"""#RESULT :  PREDICTED SCORE IF A STUDENT STUDIES 9.25 HRS A DAY IS 91.967%"""